/*
 * Count how many bytes contain the pattern, maximum to be 32, and write to data_mem[33] 
 */
int pattern_counter_a (data_mem){
    int i,j,k,l;

    // Counter for pattern searching
    int count = 0;
    
    // Array to store the pattern 
    pattern[];
    data = data_mem[32]    
    // Retrieve the search pattern 
    for (i=3; i < 8; i++){
        pattern[i-3] = data[i]
    }

    // Iterate each byte to check the pattern
    for (i=0; i < 32; i++){
        byte_search = data_mem[i]
        
        // bit position: _ _ _ _ _ _ _ _ 
        //               0 1 2 3 4 5 6 7 
        // The right most position for the pattern to start is at position 3 
        // Loop through the current byte, if we found any occurrence of the pattern in this byte,
        // increase count and immediately move to the next byte 
        for (j=0; j < 4; j++){
            // the counter for the occurrence of the pattern in this byte 
            temp_count = 0; 
            
            for (k=j, l=0; k < j+5, l < 5; k++){
                if (byte_search[k] == pattern[l]) {
                    temp_count++; 
                } 
            }

            // Once found any occurrence of pattern, move to the next byte i 
            if (temp_count == 5){
                count++; 
                break; 
            }
        }
    }

    return count; 
}

/*
 * Count the number of bytes within which the pattern occurs, and write to data_mem[34]
 */
int pattern_counter_b (){
    int i,j,k,l;

    // Counter for pattern searching
    int count = 0;
    
    // Array to store the pattern 
    pattern[];
    data = data_mem[32]    
    // Retrieve the search pattern 
    for (i=3; i < 8; i++){
        pattern[i-3] = data[i]
    }

    // Iterate each byte to check the pattern
    for (i=0; i < 32; i++){
        byte_search = data_mem[i]
        
        // bit position: _ _ _ _ _ _ _ _ 
        //               0 1 2 3 4 5 6 7 
        // The right most position for the pattern to start is at position 3 
        // Loop through the current byte, if we found any occurrence of the pattern in this byte,
        // increase count and continue till the end of this byte. 
        for (j=0; j < 4; j++){
            // the counter for the occurrence of the pattern in this byte 
            temp_count = 0; 
            
            for (k=j, l=0; k < j+5, l < 5; k++){
                if (byte_search[k] == pattern[l]) {
                    temp_count++; 
                } 
            }

            // Found the pattern
            if (temp_count == 5){
                count++; 
            }
        }
    }

    return count; 
}

/*
 * Count the total number of times the pattern occurs anywhere in the string, 256-bit string, 
 * and write to data_mem[35]
 */
int pattern_counter_c (){
    int i,j,k,l;

    // Counter for pattern searching
    count = 0;
    
    // Array to store the pattern 
    pattern[];
    data = data_mem[32]    
    // Retrieve the search pattern 
    for (i=3; i < 8; i++){
        pattern[i-3] = data[i]
    }

    // Iterate each byte to check the pattern
    for (i=0; i < 32; i++){
        byte_search = data_mem[i]
        
        // bit position: _ _ _ _ _ _ _ _ 
        //               0 1 2 3 4 5 6 7 
        // The right most position for the pattern to start is at position 3 
        // Loop through the current byte, if we found any occurrence of the pattern in this byte,
        // increase count and continue till the end of this byte. 
        for (j=0; j < 4; j++){
            // the counter for the occurrence of the pattern in this byte 
            temp_count = 0; 
            
            for (k=j, l=0; k < j+5, l < 5; k++){
                if (byte_search[k] == pattern[l]) {
                    temp_count++; 
                } 
            }

            // Found the pattern
            if (temp_count == 5){
                count++; 
            }
        }

        
    }

    return count; 
}